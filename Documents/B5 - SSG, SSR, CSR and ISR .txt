** Trong NextJs có 2 hình thức để Pre-rendering
1. SSG - Static Site Generation
2. SSR - Server Side Rendering
## Pre-rendering (Using Next.js) 
- Mình sẽ render sẵn cái file html ở phía server thì lúc này khi mà user nó load lên là mình có sẵn html để show lên rồi, tức là mình đã render sẵn cái phần html bên phía server cho nên user mà nó get về thì nó sẽ get cái file html đó về là nó có sẵn đầy đủ mọi thứ nó show lên rồi sau đó nó sẽ load thêm javascript và khi đó nó sẽ thực hiện quá trình hydration (attch các event listeners vào trong cái markup đã được render bên phía server)
## No Pre-rendering (Plain React.js app) 
- Trong ReactJs ví dụ như bình thường mình sử dụng create-react-app thì chúng ta sẽ thấy là khi mà mình ở cái lần render đầu tiên lên ấy nó tải về thì cái file html của mình là 1 cái file rỗng, nó chỉ có 1 cái div là div root thôi, sau đó nó load thêm js về xong sau đó từ js load lên sau đó nó mới render cái dom của mình lên
## SSG - Static Site Generation
- Bây giờ có cách nào đó tại thời điểm tôi build cái dự án lên là nó ra được sẵn những nội dung static rồi cho nên mỗi thằng user gửi request lên tôi chỉ cần gửi cái file mà tôi đã tạo ra sẵn lúc tôi build và trả về cho nó là xong như vậy trước khi mình deloy ấy mình chạy một cái lệnh build, build xong nó ra một mớ các file html, khi thằng user nó request lên thì trả về, request lên trả về  xong! Nhưng mà nhớ đây là ở bước build time tức là nó sẽ diễn ra trong cái thời điểm khi mà mình gõ lệnh yarn build xong bên dưới nó sẽ gọi cái thằng next build
## SSR - Server Side Rendering
- Nếu như bạn muốn làm cái dạng each request nghĩa là cái thằng user nó gửi request lên xong đó bạn sẽ phải đi xử lý, gom dữ liệu, lấy dữ liệu gì đó sau đó bạn mới tạo ra cái file html sau đó bạn mới trả cho user thì cái này chúng ta thấy là, cứ mỗi lần request lên mình lại phải đi xử lý để tạo ra 1 file html, cứ mỗi lần gửi lên lại phải xử lý và tạo ra 1 file html thì cái điều này chúng ta thấy là rõ ràng là nếu như mà mình có nhiều cái request như vậy thì rõ ràng server của chúng ta làm việc rất là cực, đối với thằng SSG mình thấy rõ ràng là mình build ra một cái, ra một file html rồi ông nào cần cứ query lên trả về, query lên trả về rất là nhanh mà server của mình không cần phải tính toán gì cả còn cái thằng SSR này mình phải đợi cái việc tính toán bên phía server nữa, server phải xử lý rồi nhiều khi phải xử lý data, get data,... thì nó rất là tốn cái resources của mình và tùy thuộc vào cái việc server của mình tính toán nhanh hay chậm mà nó sẽ ảnh hưởng tới việc là user sẽ phải đợi nhanh hay chậm trong cái việc để lấy được cái file html này về. Đại loại là SSR theo mỗi request nó sẽ tạo ra một file html trả về còn đối với thằng SSG build 1 phát ra 1 mớ html sau đó phục vụ cho user là xong. Một cái là build time, một cái là run time
## CSR - Client Side Rendering
- Nó đợi phía client load js lên sau đó mới render lên, còn trong NextJs khi mà mình nói CSR ấy thì mình có thể kết hợp với ông thần SSG thì lúc đó mình có thể tạo ra những cái file markup sẵn còn cái phần dữ liệu thì mình không cần fetch bên phía server mà đợi khi mình load phía client rồi, nó lên show được cái markup rồi sau đó mình có thể đi fetch dữ liệu sau đó mình mới show cái phần dữ liệu động đó lên -> cái này sẽ làm cho những cái trường hợp là dữ liệu của mình không cần phải render sẵn bên phía server, không cần SEO cho những cái private website thì mình có thể làm cái kiểu này, làm theo kiểu này được cái nó tiện là cái markup của mình nó vẫn được generate sẵn, nó vẫn là 1 cái static file sẵn còn cái phần dynamic là cái phần có data thì mình đợi ở phía client mình show cái loading hoặc mình đi fetch data về mình show lên.
## ISR - Incremental Static Regeneration
- Trong trường hợp mà chúng ta làm một cái trang eCommerce, chúng ta có hàng trăm, hàng triệu cái product thì rõ ràng cái mà mình mong muốn là gì nhanh và phải SEO, thì mình chỉ có thể là SSG hoặc SSR, nếu bạn mà dùng SSG
thì nó sẽ không hợp lý chút nào cả lý do là gì? Ví dụ mình có 1 triệu sản phẩm đi, lúc mà mình build thì mình phải tạo ra 1 triệu cái file html thì mình phải tốn bao nhiêu lâu, nó tốn cả giờ đồng hồ hoặc thậm chí là hơn cho nên là nếu mà cứ mỗi lần mình thay đổi 1 cái gì đó chút xíu mà phải tạo tốn mấy tiếng đồng hồ ngồi build lại cái project của mình thì thực sự nó không hợp lý chút nào và nó không hiệu quả, còn nếu như mình sử dụng SSR mình sẽ thấy là không lẽ mình có 1000 user nó query cùng 1 cái trang đấy thành ra server của mình nó phải process 1 ngàn lần thì thực sự nó cũng rất là ác mộng,server của mình nó phải xử lý rất là cực hình luôn tại vì
mình có rất nhiều product và cứ mỗi lần nó gửi lên lại đi query database rồi xong rồi lại trả nó về thì mình có thể kết hợp SSR với Cache tuy nhiên nó cũng rất là hạn chế => nên nó mới sinh ra cái ISR này tức là ok thay vì tôi có một triệu sản phẩm nhưng mà đâu đó tôi có ngàn sản phẩm đang phổ biến thôi như vậy tôi sẽ build 1 ngàn sản phẩm thôi, tôi build 1 ngàn sang phẩm đó ra dạng SSG, tôi build ra sẵn tôi sẽ query một ngàn sản phẩm phổ biến đó build ra sẵn một ngàn file html như vậy ô nào query lên thì có sẵn file html trả về còn nếu như ông nào query lên vào các sản phẩm mà chưa có thì lúc đấy mình sẽ tạo ra một cái file html mới để mình trả về cho user và những cái thằng sau mà nó lại query lại sẵn cái file html đó thì mình đã generate sẵn hồi nãy rồi mình lấy mình tái sử dụng thôi, như vậy tức là cứ thằng user mà nó request thêm thì chỉ có thằng đầu tiên phải đợi chút xíu thôi là để mình phải đi generate ra cái file html để mình trả về, còn những thằng sau thì rất là nhanh query lên trả về, query lên trả về. Cái ISR này bản chất nó cũng là dựa trên cái SSG nhưng nó kết hợp thêm 1 cái options là revalidate
## Pre-rendering form is per-page basis
- Mình có nhiều kiểu ví dụ như là dùng SSG, SSR, ISR,.. thì nó rất xịn một cái là mỗi trang mình có thể config 1 cái hình thức pre-rendering khác nhau. Ví dụ trang home tôi muốn sử dụng SSR, tôi muốn trang about nó sử dụng SSG, mình sẽ có cách để config cái loại pre-rendering cho từng trang một


